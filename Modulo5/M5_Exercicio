{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1yiWWoIXHSMfau_QwwChYv0IcxzjAHHeH","timestamp":1669164058487}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"code","metadata":{"id":"56stfcJ951uR","executionInfo":{"status":"ok","timestamp":1669168385451,"user_tz":180,"elapsed":242,"user":{"displayName":"Andréa Cristina Biavatti","userId":"06199587885341219893"}}},"source":["from numpy import expand_dims\n","from numpy import zeros\n","from numpy import ones\n","from numpy import vstack\n","from numpy.random import randn\n","from numpy.random import randint\n","from keras.datasets.mnist import load_data\n","from keras.optimizers import Adam\n","from keras.models import Sequential\n","from keras.layers import Dense\n","from keras.layers import Reshape\n","from keras.layers import Flatten\n","from keras.layers import Conv2D\n","from keras.layers import Conv2DTranspose\n","from keras.layers import LeakyReLU\n","from keras.layers import Dropout\n","from matplotlib import pyplot"],"execution_count":31,"outputs":[]},{"cell_type":"code","metadata":{"id":"XtrPoa_37UWa"},"source":["# define the standalone discriminator model\n","def define_discriminator(in_shape=(28,28,1)):\n","\tmodel = Sequential()\n","\tmodel.add(Conv2D(64, (3,3), strides=(2, 2), padding='same', input_shape=in_shape))\n","\tmodel.add(LeakyReLU(alpha=0.2))\n","\tmodel.add(Dropout(0.4))\n","\tmodel.add(Conv2D(64, (3,3), strides=(2, 2), padding='same'))\n","\tmodel.add(LeakyReLU(alpha=0.2))\n","\tmodel.add(Dropout(0.4))\n","\tmodel.add(Flatten())\n","\tmodel.add(Dense(1, activation='sigmoid'))\n","\t# compile model\n","\topt = Adam(lr=0.0002, beta_1=0.5)\n","\tmodel.compile(loss='binary_crossentropy', optimizer=opt, metrics=['accuracy'])\n","\treturn model\n","\n","# define the standalone generator model\n","def define_generator(latent_dim):\n","\tmodel = Sequential()\n","\t# foundation for 7x7 image\n","\tn_nodes = 128 * 7 * 7\n","\tmodel.add(Dense(n_nodes, input_dim=latent_dim))\n","\tmodel.add(LeakyReLU(alpha=0.2))\n","\tmodel.add(Reshape((7, 7, 128)))\n","\t# upsample to 14x14\n","\tmodel.add(Conv2DTranspose(128, (4,4), strides=(2,2), padding='same'))\n","\tmodel.add(LeakyReLU(alpha=0.2))\n","\t# upsample to 28x28\n","\tmodel.add(Conv2DTranspose(128, (4,4), strides=(2,2), padding='same'))\n","\tmodel.add(LeakyReLU(alpha=0.2))\n","\tmodel.add(Conv2D(1, (7,7), activation='sigmoid', padding='same'))\n","\treturn model\n","\n","# define the combined generator and discriminator model, for updating the generator\n","def define_gan(g_model, d_model):\n","\t# make weights in the discriminator not trainable\n","\td_model.trainable = False\n","\t# connect them\n","\tmodel = Sequential()\n","\t# add generator\n","\tmodel.add(g_model)\n","\t# add the discriminator\n","\tmodel.add(d_model)\n","\t# compile model\n","\topt = Adam(lr=0.0002, beta_1=0.5)\n","\tmodel.compile(loss='binary_crossentropy', optimizer=opt)\n","\treturn model\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"MhL82ALJ7XWa"},"source":["# load and prepare mnist training images\n","def load_real_samples():\n","\t# load mnist dataset\n","\t(trainX, _), (_, _) = load_data()\n","\t# expand to 3d, e.g. add channels dimension\n","\tX = expand_dims(trainX, axis=-1)\n","\t# convert from unsigned ints to floats\n","\tX = X.astype('float32')\n","\t# scale from [0,255] to [0,1]\n","\tX = X / 255.0\n","\treturn X\n","\n","# select real samples\n","def generate_real_samples(dataset, n_samples):\n","\t# choose random instances\n","\tix = randint(0, dataset.shape[0], n_samples)\n","\t# retrieve selected images\n","\tX = dataset[ix]\n","\t# generate 'real' class labels (1)\n","\ty = ones((n_samples, 1))\n","\treturn X, y\n","\n","# generate points in latent space as input for the generator\n","def generate_latent_points(latent_dim, n_samples):\n","\t# generate points in the latent space\n","\tx_input = randn(latent_dim * n_samples)\n","\t# reshape into a batch of inputs for the network\n","\tx_input = x_input.reshape(n_samples, latent_dim)\n","\treturn x_input\n","\n","# use the generator to generate n fake examples, with class labels\n","def generate_fake_samples(g_model, latent_dim, n_samples):\n","\t# generate points in latent space\n","\tx_input = generate_latent_points(latent_dim, n_samples)\n","\t# predict outputs\n","\tX = g_model.predict(x_input)\n","\t# create 'fake' class labels (0)\n","\ty = zeros((n_samples, 1))\n","\treturn X, y\n","\n","# create and save a plot of generated images (reversed grayscale)\n","def save_plot(examples, epoch, n=10):\n","\t# plot images\n","\tfor i in range(n * n):\n","\t\t# define subplot\n","\t\tpyplot.subplot(n, n, 1 + i)\n","\t\t# turn off axis\n","\t\tpyplot.axis('off')\n","\t\t# plot raw pixel data\n","\t\tpyplot.imshow(examples[i, :, :, 0], cmap='gray_r')\n","\t# save plot to file\n","\tfilename = 'generated_plot_e%03d.png' % (epoch+1)\n","\tpyplot.savefig(filename)\n","\tpyplot.close()\n","\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"t-WGNGIu7d6v"},"source":["# evaluate the discriminator, plot generated images, save generator model\n","def summarize_performance(epoch, g_model, d_model, dataset, latent_dim, n_samples=100):\n","\t# prepare real samples\n","\tX_real, y_real = generate_real_samples(dataset, n_samples)\n","\t# evaluate discriminator on real examples\n","\t_, acc_real = d_model.evaluate(X_real, y_real, verbose=0)\n","\t# prepare fake examples\n","\tx_fake, y_fake = generate_fake_samples(g_model, latent_dim, n_samples)\n","\t# evaluate discriminator on fake examples\n","\t_, acc_fake = d_model.evaluate(x_fake, y_fake, verbose=0)\n","\t# summarize discriminator performance\n","\tprint('>Accuracy real: %.0f%%, fake: %.0f%%' % (acc_real*100, acc_fake*100))\n","\t# save plot\n","\tsave_plot(x_fake, epoch)\n","\t# save the generator model tile file\n","\tfilename = 'generator_model_%03d.h5' % (epoch + 1)\n","\tg_model.save(filename)\n","\n","# train the generator and discriminator\n","def train(g_model, d_model, gan_model, dataset, latent_dim, n_epochs=100, n_batch=256):\n","\tbat_per_epo = int(dataset.shape[0] / n_batch)\n","\thalf_batch = int(n_batch / 2)\n","\t# manually enumerate epochs\n","\tfor i in range(n_epochs):\n","\t\t# enumerate batches over the training set\n","\t\tfor j in range(bat_per_epo):\n","\t\t\t# get randomly selected 'real' samples\n","\t\t\tX_real, y_real = generate_real_samples(dataset, half_batch)\n","\t\t\t# generate 'fake' examples\n","\t\t\tX_fake, y_fake = generate_fake_samples(g_model, latent_dim, half_batch)\n","\t\t\t# create training set for the discriminator\n","\t\t\tX, y = vstack((X_real, X_fake)), vstack((y_real, y_fake))\n","\t\t\t# update discriminator model weights\n","\t\t\td_loss, _ = d_model.train_on_batch(X, y)\n","\t\t\t# prepare points in latent space as input for the generator\n","\t\t\tX_gan = generate_latent_points(latent_dim, n_batch)\n","\t\t\t# create inverted labels for the fake samples\n","\t\t\ty_gan = ones((n_batch, 1))\n","\t\t\t# update the generator via the discriminator's error\n","\t\t\tg_loss = gan_model.train_on_batch(X_gan, y_gan)\n","\t\t\t# summarize loss on this batch\n","\t\t\tprint('>%d, %d/%d, d=%.3f, g=%.3f' % (i+1, j+1, bat_per_epo, d_loss, g_loss))\n","\t\t# evaluate the model performance, sometimes\n","\t\tif (i+1) % 10 == 0:\n","\t\t\tsummarize_performance(i, g_model, d_model, dataset, latent_dim)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","output_embedded_package_id":"1w7-bfRTouUJGeydE8rEaRBtIqAP0hxDr"},"id":"tJ2O68Lm7gwH","executionInfo":{"status":"ok","timestamp":1669167730951,"user_tz":180,"elapsed":3585353,"user":{"displayName":"Andréa Cristina Biavatti","userId":"06199587885341219893"}},"outputId":"a3c5436b-12ee-41a3-b0a3-2e260af6090c"},"source":["# size of the latent space\n","latent_dim = 100\n","# create the discriminator\n","d_model = define_discriminator()\n","# create the generator\n","g_model = define_generator(latent_dim)\n","# create the gan\n","gan_model = define_gan(g_model, d_model)\n","# load image data\n","dataset = load_real_samples()\n","# train model\n","train(g_model, d_model, gan_model, dataset, latent_dim)"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":"Output hidden; open in https://colab.research.google.com to view."},"metadata":{}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"f6VcTk_Uwqpa","executionInfo":{"status":"ok","timestamp":1669167744515,"user_tz":180,"elapsed":272,"user":{"displayName":"Andréa Cristina Biavatti","userId":"06199587885341219893"}},"outputId":"dda2f54c-1298-4f54-ade8-f19d9ae96d25"},"source":["g_model"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<keras.engine.sequential.Sequential at 0x7f61b2b6da50>"]},"metadata":{},"execution_count":6}]},{"cell_type":"code","metadata":{"id":"QRFBZDBAwrUv"},"source":["# generate points in latent space as input for the generator\n","def generate_latent_points(latent_dim, n_samples):\n","\t# generate points in the latent space\n","\tx_input = randn(latent_dim * n_samples)\n","\t# reshape into a batch of inputs for the network\n","\tx_input = x_input.reshape(n_samples, latent_dim)\n","\treturn x_input\n","\n","# use the generator to generate n fake examples, with class labels\n","def generate_fake_samples(g_model, latent_dim, n_samples):\n","\t# generate points in latent space\n","\tx_input = generate_latent_points(latent_dim, n_samples)\n","\t# predict outputs\n","\tX = g_model.predict(x_input)\n","\t# create 'fake' class labels (0)\n","\ty = zeros((n_samples, 1))\n","\treturn X, y\n","\n","# create and save a plot of generated images (reversed grayscale)\n","def save_plot(examples, epoch, n=10):\n","\t# plot images\n","\tfor i in range(n * n):\n","\t\t# define subplot\n","\t\tpyplot.subplot(n, n, 1 + i)\n","\t\t# turn off axis\n","\t\tpyplot.axis('off')\n","\t\t# plot raw pixel data\n","\t\tpyplot.imshow(examples[i, :, :, 0], cmap='gray_r')\n","\t# save plot to file\n","\tfilename = 'generated_plot_e%03d.png' % (epoch+1)\n","\tpyplot.savefig(filename)\n","\tpyplot.close()\n","\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"RAuM778cyRK8","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1669167749323,"user_tz":180,"elapsed":285,"user":{"displayName":"Andréa Cristina Biavatti","userId":"06199587885341219893"}},"outputId":"a7010b55-bcb7-4665-edca-71262bb3af94"},"source":["amostra_falsa = generate_fake_samples(g_model, 100, 20)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1/1 [==============================] - 0s 125ms/step\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":282},"id":"uG3wculMyenF","executionInfo":{"status":"ok","timestamp":1669167753955,"user_tz":180,"elapsed":267,"user":{"displayName":"Andréa Cristina Biavatti","userId":"06199587885341219893"}},"outputId":"a6a63d7f-75a1-4184-9237-de73b7b7c8fd"},"source":["pyplot.imshow(1-amostra_falsa[0][0][:,:,0], cmap = 'gray')"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.image.AxesImage at 0x7f5fd5689cd0>"]},"metadata":{},"execution_count":9},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"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\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":282},"id":"jlbApNfgyjOs","executionInfo":{"status":"ok","timestamp":1669167758144,"user_tz":180,"elapsed":281,"user":{"displayName":"Andréa Cristina Biavatti","userId":"06199587885341219893"}},"outputId":"2d91ca7f-0654-4105-c075-e3661b2a95d8"},"source":["pyplot.imshow(1-amostra_falsa[0][2][:,:,0], cmap = 'gray')"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.image.AxesImage at 0x7f5fd5643810>"]},"metadata":{},"execution_count":10},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"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\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":282},"id":"lCj8-1L60CkC","executionInfo":{"status":"ok","timestamp":1669167761585,"user_tz":180,"elapsed":12,"user":{"displayName":"Andréa Cristina Biavatti","userId":"06199587885341219893"}},"outputId":"971e8c06-7d2f-4d0f-c37c-85d9ceaeed43"},"source":["pyplot.imshow(1-amostra_falsa[0][3][:,:,0], cmap = 'gray')"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.image.AxesImage at 0x7f5fd55d36d0>"]},"metadata":{},"execution_count":11},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"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\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":282},"id":"Rr-e8YyK0Cp9","executionInfo":{"status":"ok","timestamp":1669167765872,"user_tz":180,"elapsed":443,"user":{"displayName":"Andréa Cristina Biavatti","userId":"06199587885341219893"}},"outputId":"1117b208-50b1-43ee-c619-9a67a8dba87a"},"source":["pyplot.imshow(1-amostra_falsa[0][4][:,:,0], cmap = 'gray')"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.image.AxesImage at 0x7f5fd553d290>"]},"metadata":{},"execution_count":12},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"iVBORw0KGgoAAAANSUhEUgAAAPsAAAD4CAYAAAAq5pAIAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAOgElEQVR4nO3dfYxUZZbH8d+RlxAEFaVtieD2SIzGlyxMSmIyOnFjFtE/VEwwQwTRGJsQjTNxEtfMxowv/+Cyw7gmm0lgJbDrCBJmjJjA7riEBCdRpNRebTVus6ZhIEg38gegEgTO/tGXSYt9nyrq1huc7yfpVNU99fQ9lv681fepW4+5uwCc+85rdQMAmoOwA0EQdiAIwg4EQdiBIEY3c2eTJ0/2rq6uZu4SCKW/v18HDhywkWqFwm5mcyT9i6RRkv7N3Zemnt/V1aVyuVxklwASSqVSbq3mt/FmNkrSv0q6Q9K1kuab2bW1/j4AjVXkb/ZZkna6+xfufkzSOkl316ctAPVWJOyXS/rLsMd7sm3fY2bdZlY2s/Lg4GCB3QEoouFn4919hbuX3L3U0dHR6N0ByFEk7HslTRv2eGq2DUAbKhL2HZKuMrMfmdlYST+TtLE+bQGot5qn3tz9uJk9Jum/NDT1tsrdP6lbZwDqqtA8u7tvkrSpTr0AaCA+LgsEQdiBIAg7EARhB4Ig7EAQhB0IgrADQRB2IAjCDgRB2IEgCDsQBGEHgiDsQBCEHQiCsANBEHYgCMIOBEHYgSAIOxAEYQeCIOxAEIQdCIKwA0EQdiAIwg4EQdiBIAg7EARhB4Ig7EAQhB0IotCSzWbWL+mwpBOSjrt7qR5NAai/QmHP/J27H6jD7wHQQLyNB4IoGnaX9Ccze9/Mukd6gpl1m1nZzMqDg4MFdwegVkXDfrO7/1jSHZIeNbOfnv4Ed1/h7iV3L3V0dBTcHYBaFQq7u+/NbgckvS5pVj2aAlB/NYfdzM43s4mn7kuaLam3Xo0BqK8iZ+M7Jb1uZqd+z6vu/p916QpA3dUcdnf/QtLf1rEXAA3E1BsQBGEHgiDsQBCEHQiCsANB1ONCGLTYwMBAbu3kyZPJsatWrUrWV65cmayXSukLHW+88cbc2uLFi5NjL7zwwmQdZ4YjOxAEYQeCIOxAEIQdCIKwA0EQdiAIwg4EwTx7ldw9t9bf358cu3fv3mR9ypQpyfp7772XrD/++OO5tYMHDybHVpqHr6TSP/uGDRtya1u3bk2O3bx5cy0tIQdHdiAIwg4EQdiBIAg7EARhB4Ig7EAQhB0Ignn2Kq1evTq39sgjjyTHnjhxos7dVG/MmDHJ+syZM5P16dOnJ+u7d+9O1svlcm5t27ZtybGff/55sn711Vcn6/g+juxAEIQdCIKwA0EQdiAIwg4EQdiBIAg7EATz7FVasGBBbm306PTL+OKLLybrvb3FlrW/4YYbcmtLlixJjn3ooYeS9WxJ7lxvvvlmsn7vvffm1o4ePZocu3379mSdefYzU/HIbmarzGzAzHqHbbvYzN4ys77sdlJj2wRQVDVv41dLmnPatqckbXH3qyRtyR4DaGMVw+7u2ySd/t1Gd0tak91fI+meOvcFoM5qPUHX6e77svtfSurMe6KZdZtZ2czKg4ODNe4OQFGFz8b70Dcx5n4bo7uvcPeSu5c6OjqK7g5AjWoN+34zmyJJ2W3+MqIA2kKtYd8oaVF2f5GkN+rTDoBGqTjPbmZrJd0qabKZ7ZH0a0lLJa03s4cl7ZJ0XyObbAep68IXLlyYHDtv3rxkfd26dcn6u+++m6xfeumlubW77rorOfa889L/v099X74kvfTSS8l66nvpK30+obMz91QQalAx7O4+P6d0W517AdBAfFwWCIKwA0EQdiAIwg4EQdiBILjEtQnGjRuXrD/44IOF6keOHMmtLV++PDm20rRgpUtce3p6kvXU1N3x48eTY5ctW5as33LLLcn6+PHjk/VoOLIDQRB2IAjCDgRB2IEgCDsQBGEHgiDsQBDMs58DJkyYkFt7+umnk2P7+vqS9UqX73711VfJekqly2u3bt2arG/YsCFZf+CBB864p3MZR3YgCMIOBEHYgSAIOxAEYQeCIOxAEIQdCIJ59uBee+21ZH3Hjh2Ffv9FF12UW3vnnXeSY9evX5+sb9u2LVmfO3dubm3ixInJsecijuxAEIQdCIKwA0EQdiAIwg4EQdiBIAg7EATz7OeAEydO5NY2bdqUHPv8888n65WWbK703eyvvvpqbm369OnJsbNmzUrWDx8+nKwfPHgwt8Y8+wjMbJWZDZhZ77Btz5jZXjPryX7ubGybAIqq5m38aklzRtj+W3efkf2kDx8AWq5i2N19m6T890MAzgpFTtA9ZmYfZW/zJ+U9ycy6zaxsZuXBwcECuwNQRK1h/52k6ZJmSNon6Td5T3T3Fe5ecvdSR0dHjbsDUFRNYXf3/e5+wt1PSlopKX3aFEDL1RR2M5sy7OFcSb15zwXQHirOs5vZWkm3SppsZnsk/VrSrWY2Q5JL6pe0uIE9tr3U+uiSdP/99yfrhw4dStZHjRqVrKfmmytdj15pHr3Sd7tfeeWVyfqcOSNN5AyptPZ7amw1dXxfxbC7+/wRNr/cgF4ANBAflwWCIOxAEIQdCIKwA0EQdiAILnGt0rFjx3Jr8+bNS47dsmVLsp66RFWSTp48maynprAqTa1ddtllyXp3d3ey/uyzzybr7eqbb75J1seOHZusjx599kWHIzsQBGEHgiDsQBCEHQiCsANBEHYgCMIOBHH2TRa2SGouvKenJzn2u+++q3c7VbvtttuS9VdeeSVZrzQP385Sn0/o7U1/BcMVV1yRrJ+NrwtHdiAIwg4EQdiBIAg7EARhB4Ig7EAQhB0Ignn2Ko0bNy63tnTp0uTYJUuWJOvffvttTT1Vo6+vL1lfu3Ztsn7dddcl65Wuxd+1a1dubfPmzcmxt99+e7K+c+fOZP3tt9/OrX344YfJsbNnz07WKy2F3Y44sgNBEHYgCMIOBEHYgSAIOxAEYQeCIOxAEMyzVyn13eyVrhl/8sknk/XnnnsuWa/03e+p+u7du5Njn3jiiWS90pLNEyZMSNa//vrrZD1l48aNNY+V0v/OLrjgguTYBQsWFNp3O6p4ZDezaWa21cw+NbNPzOzn2faLzewtM+vLbic1vl0AtarmbfxxSb9092sl3STpUTO7VtJTkra4+1WStmSPAbSpimF3933u/kF2/7CkzyRdLuluSWuyp62RdE+jmgRQ3BmdoDOzLkkzJW2X1Onu+7LSl5I6c8Z0m1nZzMqDg4MFWgVQRNVhN7MJkv4g6Rfufmh4zYfOEI14lsjdV7h7yd1LHR0dhZoFULuqwm5mYzQU9N+7+x+zzfvNbEpWnyJpoDEtAqiHilNvNjR/8bKkz9x9+bDSRkmLJC3Nbt9oSIdngalTpybrlaa3Kl3iumzZsmS90tRcEZWWiz506FCy3kjjx49P1lNTmpWm1jo7R/yr9KxWzTz7TyQtlPSxmZ36gvRfaSjk683sYUm7JN3XmBYB1EPFsLv7nyXlfToh/WkSAG2Dj8sCQRB2IAjCDgRB2IEgCDsQBJe4NkGlyylfeOGFZH3u3LnJeupS0K6uruTYo0ePJuvXXHNNsj5q1KhkPTVfXS6Xk2MvueSSZH3atGnJ+owZM5L1aDiyA0EQdiAIwg4EQdiBIAg7EARhB4Ig7EAQzLOfBW666aZC9XZ1/fXXt7qFUDiyA0EQdiAIwg4EQdiBIAg7EARhB4Ig7EAQhB0IgrADQRB2IAjCDgRB2IEgCDsQBGEHgiDsQBAVw25m08xsq5l9amafmNnPs+3PmNleM+vJfu5sfLsAalXNl1ccl/RLd//AzCZKet/M3spqv3X3f25cewDqpZr12fdJ2pfdP2xmn0m6vNGNAaivM/qb3cy6JM2UtD3b9JiZfWRmq8xsUs6YbjMrm1l5cHCwULMAald12M1sgqQ/SPqFux+S9DtJ0yXN0NCR/zcjjXP3Fe5ecvdSR0dHHVoGUIuqwm5mYzQU9N+7+x8lyd33u/sJdz8paaWkWY1rE0BR1ZyNN0kvS/rM3ZcP2z5l2NPmSuqtf3sA6qWas/E/kbRQ0sdm1pNt+5Wk+WY2Q5JL6pe0uCEdAqiLas7G/1mSjVDaVP92ADQKn6ADgiDsQBCEHQiCsANBEHYgCMIOBEHYgSAIOxAEYQeCIOxAEIQdCIKwA0EQdiAIwg4EYe7evJ2ZDUraNWzTZEkHmtbAmWnX3tq1L4nealXP3v7G3Uf8/remhv0HOzcru3upZQ0ktGtv7dqXRG+1alZvvI0HgiDsQBCtDvuKFu8/pV17a9e+JHqrVVN6a+nf7ACap9VHdgBNQtiBIFoSdjObY2afm9lOM3uqFT3kMbN+M/s4W4a63OJeVpnZgJn1Dtt2sZm9ZWZ92e2Ia+y1qLe2WMY7scx4S1+7Vi9/3vS/2c1slKT/lfT3kvZI2iFpvrt/2tRGcphZv6SSu7f8Axhm9lNJRyT9u7tfn237J0kH3X1p9j/KSe7+D23S2zOSjrR6Ge9staIpw5cZl3SPpAfVwtcu0dd9asLr1ooj+yxJO939C3c/JmmdpLtb0Efbc/dtkg6etvluSWuy+2s09B9L0+X01hbcfZ+7f5DdPyzp1DLjLX3tEn01RSvCfrmkvwx7vEfttd67S/qTmb1vZt2tbmYEne6+L7v/paTOVjYzgorLeDfTacuMt81rV8vy50Vxgu6Hbnb3H0u6Q9Kj2dvVtuRDf4O109xpVct4N8sIy4z/VStfu1qXPy+qFWHfK2nasMdTs21twd33ZrcDkl5X+y1Fvf/UCrrZ7UCL+/mrdlrGe6RlxtUGr10rlz9vRdh3SLrKzH5kZmMl/UzSxhb08QNmdn524kRmdr6k2Wq/pag3SlqU3V8k6Y0W9vI97bKMd94y42rxa9fy5c/dvek/ku7U0Bn5/5P0j63oIaevKyX9T/bzSat7k7RWQ2/rvtPQuY2HJV0iaYukPkn/LeniNurtPyR9LOkjDQVrSot6u1lDb9E/ktST/dzZ6tcu0VdTXjc+LgsEwQk6IAjCDgRB2IEgCDsQBGEHgiDsQBCEHQji/wHoMWwHAf1B4gAAAABJRU5ErkJggg==\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":282},"id":"LoVmnnJL0CwG","executionInfo":{"status":"ok","timestamp":1669167768590,"user_tz":180,"elapsed":13,"user":{"displayName":"Andréa Cristina Biavatti","userId":"06199587885341219893"}},"outputId":"10601851-9911-4ca1-8cdf-bf0562bdd592"},"source":["pyplot.imshow(1-amostra_falsa[0][5][:,:,0], cmap = 'gray')"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.image.AxesImage at 0x7f5fd551dd50>"]},"metadata":{},"execution_count":13},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"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\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":282},"id":"GjkSM83Cz9km","executionInfo":{"status":"ok","timestamp":1669167772155,"user_tz":180,"elapsed":859,"user":{"displayName":"Andréa Cristina Biavatti","userId":"06199587885341219893"}},"outputId":"6071c74b-6c4f-4dd9-8cfc-5a8feb0378a8"},"source":["pyplot.imshow(1-amostra_falsa[0][8][:,:,0], cmap = 'gray')"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.image.AxesImage at 0x7f5fd5487850>"]},"metadata":{},"execution_count":14},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"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\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":282},"id":"ELyaj9BV0IKe","executionInfo":{"status":"ok","timestamp":1669167774786,"user_tz":180,"elapsed":10,"user":{"displayName":"Andréa Cristina Biavatti","userId":"06199587885341219893"}},"outputId":"f863449b-b529-41c0-e15c-da1d799cc611"},"source":["pyplot.imshow(1-amostra_falsa[0][10][:,:,0], cmap = 'gray')"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.image.AxesImage at 0x7f5fd53f3350>"]},"metadata":{},"execution_count":15},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"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\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":282},"id":"aXVi2wIC0JqZ","executionInfo":{"status":"ok","timestamp":1669167777448,"user_tz":180,"elapsed":525,"user":{"displayName":"Andréa Cristina Biavatti","userId":"06199587885341219893"}},"outputId":"3fad54b1-f747-4eee-9b4b-ed4526623461"},"source":["pyplot.imshow(1-amostra_falsa[0][12][:,:,0], cmap = 'gray')"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.image.AxesImage at 0x7f5fd53d2e50>"]},"metadata":{},"execution_count":16},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"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\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":282},"id":"5igNzft_0K68","executionInfo":{"status":"ok","timestamp":1669167780644,"user_tz":180,"elapsed":4,"user":{"displayName":"Andréa Cristina Biavatti","userId":"06199587885341219893"}},"outputId":"de8855ec-f559-4b43-8120-0f39fb4f7c4a"},"source":["pyplot.imshow(1-amostra_falsa[0][19][:,:,0], cmap = 'gray')"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.image.AxesImage at 0x7f5fd5343b10>"]},"metadata":{},"execution_count":17},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"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\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":282},"id":"OcoEI4kw0MhU","executionInfo":{"status":"ok","timestamp":1669167783704,"user_tz":180,"elapsed":395,"user":{"displayName":"Andréa Cristina Biavatti","userId":"06199587885341219893"}},"outputId":"a145b0e8-1c61-430e-f4e2-59d8e73afef3"},"source":["pyplot.imshow(1-amostra_falsa[0][18][:,:,0], cmap = 'gray')"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.image.AxesImage at 0x7f5fd52b4450>"]},"metadata":{},"execution_count":18},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"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\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":282},"id":"tvnZW_us0Owl","executionInfo":{"status":"ok","timestamp":1669167787650,"user_tz":180,"elapsed":303,"user":{"displayName":"Andréa Cristina Biavatti","userId":"06199587885341219893"}},"outputId":"2b68f9b2-c3f7-4408-bc9e-522cd5fc0228"},"source":["pyplot.imshow(1-amostra_falsa[0][17][:,:,0], cmap = 'gray')"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.image.AxesImage at 0x7f5fd528df10>"]},"metadata":{},"execution_count":19},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"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\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":282},"id":"Prw9YCke0QA5","executionInfo":{"status":"ok","timestamp":1669167790045,"user_tz":180,"elapsed":10,"user":{"displayName":"Andréa Cristina Biavatti","userId":"06199587885341219893"}},"outputId":"054f334f-77c1-4ff1-f118-fd921eaa704a"},"source":["pyplot.imshow(1-amostra_falsa[0][16][:,:,0], cmap = 'gray')"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.image.AxesImage at 0x7f5fd51f7d10>"]},"metadata":{},"execution_count":20},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"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\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":282},"id":"TeMO2LjN0RJb","executionInfo":{"status":"ok","timestamp":1669167792456,"user_tz":180,"elapsed":14,"user":{"displayName":"Andréa Cristina Biavatti","userId":"06199587885341219893"}},"outputId":"d1905a23-80bf-451d-b035-b1d644390a1d"},"source":["pyplot.imshow(1-amostra_falsa[0][15][:,:,0], cmap = 'gray')"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.image.AxesImage at 0x7f5fd51e3650>"]},"metadata":{},"execution_count":21},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"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\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":282},"id":"fWAx0UPU0SXb","executionInfo":{"status":"ok","timestamp":1669167795407,"user_tz":180,"elapsed":1231,"user":{"displayName":"Andréa Cristina Biavatti","userId":"06199587885341219893"}},"outputId":"66ed28ce-c70b-46ac-9725-3d01f5f2eeb1"},"source":["pyplot.imshow(1-amostra_falsa[0][14][:,:,0], cmap = 'gray')"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.image.AxesImage at 0x7f5fd514e150>"]},"metadata":{},"execution_count":22},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"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\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"m2aRMGAP0TdF","executionInfo":{"status":"ok","timestamp":1669167798432,"user_tz":180,"elapsed":936,"user":{"displayName":"Andréa Cristina Biavatti","userId":"06199587885341219893"}},"outputId":"330e5ab7-2bbf-4698-9287-e174894d0e1b"},"source":["g_model.save('gerador')"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["WARNING:tensorflow:Compiled the loaded model, but the compiled metrics have yet to be built. `model.compile_metrics` will be empty until you train or evaluate the model.\n","WARNING:absl:Found untraced functions such as _jit_compiled_convolution_op, _jit_compiled_convolution_op, _jit_compiled_convolution_op while saving (showing 3 of 3). These functions will not be directly callable after loading.\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Gv3jSdvm0wgf","executionInfo":{"status":"ok","timestamp":1669167805838,"user_tz":180,"elapsed":3334,"user":{"displayName":"Andréa Cristina Biavatti","userId":"06199587885341219893"}},"outputId":"5f544c80-c96b-4eee-b36e-3b2383c49db4"},"source":["d_model.save('discriminador')"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["WARNING:absl:Found untraced functions such as _jit_compiled_convolution_op, _jit_compiled_convolution_op while saving (showing 2 of 2). These functions will not be directly callable after loading.\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":17},"id":"pHKFFoaB00E4","executionInfo":{"status":"ok","timestamp":1669167810536,"user_tz":180,"elapsed":242,"user":{"displayName":"Andréa Cristina Biavatti","userId":"06199587885341219893"}},"outputId":"95b5e61c-4067-46ac-c8f7-ceeff2a835c8"},"source":["from google.colab import files\n","files.download('generated_plot_e100.png') \n","files.download('generated_plot_e090.png') \n","files.download('generated_plot_e080.png') \n","files.download('generated_plot_e070.png') \n","files.download('generated_plot_e060.png') \n","files.download('generated_plot_e050.png') \n","files.download('generated_plot_e040.png') \n","files.download('generated_plot_e030.png') \n","files.download('generated_plot_e020.png') \n","files.download('generated_plot_e010.png') "],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["\n","    async function download(id, filename, size) {\n","      if (!google.colab.kernel.accessAllowed) {\n","        return;\n","      }\n","      const div = document.createElement('div');\n","      const label = document.createElement('label');\n","      label.textContent = `Downloading \"${filename}\": `;\n","      div.appendChild(label);\n","      const progress = document.createElement('progress');\n","      progress.max = size;\n","      div.appendChild(progress);\n","      document.body.appendChild(div);\n","\n","      const buffers = [];\n","      let downloaded = 0;\n","\n","      const channel = await google.colab.kernel.comms.open(id);\n","      // Send a message to notify the kernel that we're ready.\n","      channel.send({})\n","\n","      for await (const message of channel.messages) {\n","        // Send a message to notify the kernel that we're ready.\n","        channel.send({})\n","        if (message.buffers) {\n","          for (const buffer of message.buffers) {\n","            buffers.push(buffer);\n","            downloaded += buffer.byteLength;\n","            progress.value = downloaded;\n","          }\n","        }\n","      }\n","      const blob = new Blob(buffers, {type: 'application/binary'});\n","      const a = document.createElement('a');\n","      a.href = window.URL.createObjectURL(blob);\n","      a.download = filename;\n","      div.appendChild(a);\n","      a.click();\n","      div.remove();\n","    }\n","  "]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["download(\"download_b9c5dacf-bc2e-41aa-a965-261a505bb90c\", \"generated_plot_e100.png\", 40083)"]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["\n","    async function download(id, filename, size) {\n","      if (!google.colab.kernel.accessAllowed) {\n","        return;\n","      }\n","      const div = document.createElement('div');\n","      const label = document.createElement('label');\n","      label.textContent = `Downloading \"${filename}\": `;\n","      div.appendChild(label);\n","      const progress = document.createElement('progress');\n","      progress.max = size;\n","      div.appendChild(progress);\n","      document.body.appendChild(div);\n","\n","      const buffers = [];\n","      let downloaded = 0;\n","\n","      const channel = await google.colab.kernel.comms.open(id);\n","      // Send a message to notify the kernel that we're ready.\n","      channel.send({})\n","\n","      for await (const message of channel.messages) {\n","        // Send a message to notify the kernel that we're ready.\n","        channel.send({})\n","        if (message.buffers) {\n","          for (const buffer of message.buffers) {\n","            buffers.push(buffer);\n","            downloaded += buffer.byteLength;\n","            progress.value = downloaded;\n","          }\n","        }\n","      }\n","      const blob = new Blob(buffers, {type: 'application/binary'});\n","      const a = document.createElement('a');\n","      a.href = window.URL.createObjectURL(blob);\n","      a.download = filename;\n","      div.appendChild(a);\n","      a.click();\n","      div.remove();\n","    }\n","  "]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["download(\"download_76c92e09-440b-4c80-a5e3-9deaade22e6f\", \"generated_plot_e090.png\", 39921)"]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["\n","    async function download(id, filename, size) {\n","      if (!google.colab.kernel.accessAllowed) {\n","        return;\n","      }\n","      const div = document.createElement('div');\n","      const label = document.createElement('label');\n","      label.textContent = `Downloading \"${filename}\": `;\n","      div.appendChild(label);\n","      const progress = document.createElement('progress');\n","      progress.max = size;\n","      div.appendChild(progress);\n","      document.body.appendChild(div);\n","\n","      const buffers = [];\n","      let downloaded = 0;\n","\n","      const channel = await google.colab.kernel.comms.open(id);\n","      // Send a message to notify the kernel that we're ready.\n","      channel.send({})\n","\n","      for await (const message of channel.messages) {\n","        // Send a message to notify the kernel that we're ready.\n","        channel.send({})\n","        if (message.buffers) {\n","          for (const buffer of message.buffers) {\n","            buffers.push(buffer);\n","            downloaded += buffer.byteLength;\n","            progress.value = downloaded;\n","          }\n","        }\n","      }\n","      const blob = new Blob(buffers, {type: 'application/binary'});\n","      const a = document.createElement('a');\n","      a.href = window.URL.createObjectURL(blob);\n","      a.download = filename;\n","      div.appendChild(a);\n","      a.click();\n","      div.remove();\n","    }\n","  "]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["download(\"download_fd86acb7-f24c-431a-848e-9e86f2ca5e0d\", \"generated_plot_e080.png\", 40129)"]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["\n","    async function download(id, filename, size) {\n","      if (!google.colab.kernel.accessAllowed) {\n","        return;\n","      }\n","      const div = document.createElement('div');\n","      const label = document.createElement('label');\n","      label.textContent = `Downloading \"${filename}\": `;\n","      div.appendChild(label);\n","      const progress = document.createElement('progress');\n","      progress.max = size;\n","      div.appendChild(progress);\n","      document.body.appendChild(div);\n","\n","      const buffers = [];\n","      let downloaded = 0;\n","\n","      const channel = await google.colab.kernel.comms.open(id);\n","      // Send a message to notify the kernel that we're ready.\n","      channel.send({})\n","\n","      for await (const message of channel.messages) {\n","        // Send a message to notify the kernel that we're ready.\n","        channel.send({})\n","        if (message.buffers) {\n","          for (const buffer of message.buffers) {\n","            buffers.push(buffer);\n","            downloaded += buffer.byteLength;\n","            progress.value = downloaded;\n","          }\n","        }\n","      }\n","      const blob = new Blob(buffers, {type: 'application/binary'});\n","      const a = document.createElement('a');\n","      a.href = window.URL.createObjectURL(blob);\n","      a.download = filename;\n","      div.appendChild(a);\n","      a.click();\n","      div.remove();\n","    }\n","  "]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["download(\"download_604c7355-4148-41e6-851b-688b705c1a1f\", \"generated_plot_e070.png\", 41225)"]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["\n","    async function download(id, filename, size) {\n","      if (!google.colab.kernel.accessAllowed) {\n","        return;\n","      }\n","      const div = document.createElement('div');\n","      const label = document.createElement('label');\n","      label.textContent = `Downloading \"${filename}\": `;\n","      div.appendChild(label);\n","      const progress = document.createElement('progress');\n","      progress.max = size;\n","      div.appendChild(progress);\n","      document.body.appendChild(div);\n","\n","      const buffers = [];\n","      let downloaded = 0;\n","\n","      const channel = await google.colab.kernel.comms.open(id);\n","      // Send a message to notify the kernel that we're ready.\n","      channel.send({})\n","\n","      for await (const message of channel.messages) {\n","        // Send a message to notify the kernel that we're ready.\n","        channel.send({})\n","        if (message.buffers) {\n","          for (const buffer of message.buffers) {\n","            buffers.push(buffer);\n","            downloaded += buffer.byteLength;\n","            progress.value = downloaded;\n","          }\n","        }\n","      }\n","      const blob = new Blob(buffers, {type: 'application/binary'});\n","      const a = document.createElement('a');\n","      a.href = window.URL.createObjectURL(blob);\n","      a.download = filename;\n","      div.appendChild(a);\n","      a.click();\n","      div.remove();\n","    }\n","  "]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["download(\"download_5f3ca512-d17f-47ef-a5b8-8d6e75a648db\", \"generated_plot_e060.png\", 40955)"]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["\n","    async function download(id, filename, size) {\n","      if (!google.colab.kernel.accessAllowed) {\n","        return;\n","      }\n","      const div = document.createElement('div');\n","      const label = document.createElement('label');\n","      label.textContent = `Downloading \"${filename}\": `;\n","      div.appendChild(label);\n","      const progress = document.createElement('progress');\n","      progress.max = size;\n","      div.appendChild(progress);\n","      document.body.appendChild(div);\n","\n","      const buffers = [];\n","      let downloaded = 0;\n","\n","      const channel = await google.colab.kernel.comms.open(id);\n","      // Send a message to notify the kernel that we're ready.\n","      channel.send({})\n","\n","      for await (const message of channel.messages) {\n","        // Send a message to notify the kernel that we're ready.\n","        channel.send({})\n","        if (message.buffers) {\n","          for (const buffer of message.buffers) {\n","            buffers.push(buffer);\n","            downloaded += buffer.byteLength;\n","            progress.value = downloaded;\n","          }\n","        }\n","      }\n","      const blob = new Blob(buffers, {type: 'application/binary'});\n","      const a = document.createElement('a');\n","      a.href = window.URL.createObjectURL(blob);\n","      a.download = filename;\n","      div.appendChild(a);\n","      a.click();\n","      div.remove();\n","    }\n","  "]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["download(\"download_9c17c2a7-a5b6-4a62-ae32-b3df0cfb1e3c\", \"generated_plot_e050.png\", 43374)"]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["\n","    async function download(id, filename, size) {\n","      if (!google.colab.kernel.accessAllowed) {\n","        return;\n","      }\n","      const div = document.createElement('div');\n","      const label = document.createElement('label');\n","      label.textContent = `Downloading \"${filename}\": `;\n","      div.appendChild(label);\n","      const progress = document.createElement('progress');\n","      progress.max = size;\n","      div.appendChild(progress);\n","      document.body.appendChild(div);\n","\n","      const buffers = [];\n","      let downloaded = 0;\n","\n","      const channel = await google.colab.kernel.comms.open(id);\n","      // Send a message to notify the kernel that we're ready.\n","      channel.send({})\n","\n","      for await (const message of channel.messages) {\n","        // Send a message to notify the kernel that we're ready.\n","        channel.send({})\n","        if (message.buffers) {\n","          for (const buffer of message.buffers) {\n","            buffers.push(buffer);\n","            downloaded += buffer.byteLength;\n","            progress.value = downloaded;\n","          }\n","        }\n","      }\n","      const blob = new Blob(buffers, {type: 'application/binary'});\n","      const a = document.createElement('a');\n","      a.href = window.URL.createObjectURL(blob);\n","      a.download = filename;\n","      div.appendChild(a);\n","      a.click();\n","      div.remove();\n","    }\n","  "]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["download(\"download_1946e152-048b-4f35-8a14-2aedb3e1168d\", \"generated_plot_e040.png\", 42765)"]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["\n","    async function download(id, filename, size) {\n","      if (!google.colab.kernel.accessAllowed) {\n","        return;\n","      }\n","      const div = document.createElement('div');\n","      const label = document.createElement('label');\n","      label.textContent = `Downloading \"${filename}\": `;\n","      div.appendChild(label);\n","      const progress = document.createElement('progress');\n","      progress.max = size;\n","      div.appendChild(progress);\n","      document.body.appendChild(div);\n","\n","      const buffers = [];\n","      let downloaded = 0;\n","\n","      const channel = await google.colab.kernel.comms.open(id);\n","      // Send a message to notify the kernel that we're ready.\n","      channel.send({})\n","\n","      for await (const message of channel.messages) {\n","        // Send a message to notify the kernel that we're ready.\n","        channel.send({})\n","        if (message.buffers) {\n","          for (const buffer of message.buffers) {\n","            buffers.push(buffer);\n","            downloaded += buffer.byteLength;\n","            progress.value = downloaded;\n","          }\n","        }\n","      }\n","      const blob = new Blob(buffers, {type: 'application/binary'});\n","      const a = document.createElement('a');\n","      a.href = window.URL.createObjectURL(blob);\n","      a.download = filename;\n","      div.appendChild(a);\n","      a.click();\n","      div.remove();\n","    }\n","  "]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["download(\"download_194a1884-e891-493d-938a-91f7b1878bc7\", \"generated_plot_e030.png\", 40364)"]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["\n","    async function download(id, filename, size) {\n","      if (!google.colab.kernel.accessAllowed) {\n","        return;\n","      }\n","      const div = document.createElement('div');\n","      const label = document.createElement('label');\n","      label.textContent = `Downloading \"${filename}\": `;\n","      div.appendChild(label);\n","      const progress = document.createElement('progress');\n","      progress.max = size;\n","      div.appendChild(progress);\n","      document.body.appendChild(div);\n","\n","      const buffers = [];\n","      let downloaded = 0;\n","\n","      const channel = await google.colab.kernel.comms.open(id);\n","      // Send a message to notify the kernel that we're ready.\n","      channel.send({})\n","\n","      for await (const message of channel.messages) {\n","        // Send a message to notify the kernel that we're ready.\n","        channel.send({})\n","        if (message.buffers) {\n","          for (const buffer of message.buffers) {\n","            buffers.push(buffer);\n","            downloaded += buffer.byteLength;\n","            progress.value = downloaded;\n","          }\n","        }\n","      }\n","      const blob = new Blob(buffers, {type: 'application/binary'});\n","      const a = document.createElement('a');\n","      a.href = window.URL.createObjectURL(blob);\n","      a.download = filename;\n","      div.appendChild(a);\n","      a.click();\n","      div.remove();\n","    }\n","  "]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["download(\"download_599fc7f2-8b57-4fc2-840e-2f9bbb8f1839\", \"generated_plot_e020.png\", 43676)"]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["\n","    async function download(id, filename, size) {\n","      if (!google.colab.kernel.accessAllowed) {\n","        return;\n","      }\n","      const div = document.createElement('div');\n","      const label = document.createElement('label');\n","      label.textContent = `Downloading \"${filename}\": `;\n","      div.appendChild(label);\n","      const progress = document.createElement('progress');\n","      progress.max = size;\n","      div.appendChild(progress);\n","      document.body.appendChild(div);\n","\n","      const buffers = [];\n","      let downloaded = 0;\n","\n","      const channel = await google.colab.kernel.comms.open(id);\n","      // Send a message to notify the kernel that we're ready.\n","      channel.send({})\n","\n","      for await (const message of channel.messages) {\n","        // Send a message to notify the kernel that we're ready.\n","        channel.send({})\n","        if (message.buffers) {\n","          for (const buffer of message.buffers) {\n","            buffers.push(buffer);\n","            downloaded += buffer.byteLength;\n","            progress.value = downloaded;\n","          }\n","        }\n","      }\n","      const blob = new Blob(buffers, {type: 'application/binary'});\n","      const a = document.createElement('a');\n","      a.href = window.URL.createObjectURL(blob);\n","      a.download = filename;\n","      div.appendChild(a);\n","      a.click();\n","      div.remove();\n","    }\n","  "]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["download(\"download_191e7e69-bd69-452c-b8d1-4964e64c1a6f\", \"generated_plot_e010.png\", 45065)"]},"metadata":{}}]}]}